[{"content":" In this installment of my Designing with Types series, we\u0026rsquo;ll look at how some typical backend code is set up. We\u0026rsquo;ll identify some common pitfalls and identify best practices to avoid these pitfalls. Architecture Regardless of what architecture style we use, an application almost always consists of three basic tiers or layers: Presentation, Business and Infrastructure. Here\u0026rsquo;s a diagram that shows two architecture styles using these three layers.\nIn the Hexagonal Architecture, the Business layer defines ports. The Presentation and Infrastructure layer contain adapters that interact with the web framework and the persistence framework. The Dependency Inversion Principle (DIP) is used to make the Business layer easy to test, because infrastructure-dependent code can easily be replaced by test doubles.\nIn the classic N-Tier Architecture, the responsibilities of the layers are the same, only the dependency rules are different from the Hexagonal Architecture.\nLet\u0026rsquo;s look at some examples of code we often encounter in these three layers.\nInfrastructure As mentioned in the diagram above, this is the layer where database communication usually happens. It\u0026rsquo;s also commonly known as the Data Access or Persistence layer. I\u0026rsquo;m calling it Infrastructure because it can be used for more than just persistence.\nWhen used for data access, this layer usually consists of database entities and repositories. Here\u0026rsquo;s an example in Kotlin, using JPA annotations for object-relational mapping (ORM) and Spring Data\u0026rsquo;s CrudRepository to generate a repository implementation:\n@Entity data class TodoList( @Id val id: UUID, var name: String ) { @OneToMany(mappedBy = \u0026#34;todoList\u0026#34;, cascade = [CascadeType.ALL]) val items: MutableList\u0026lt;TodoItem\u0026gt; = mutableListOf() } @Entity data class TodoItem( @Id val id: UUID, @ManyToOne @JoinColumn(name = \u0026#34;todolist_id\u0026#34;, nullable = false) val todoList: TodoList, var title: String, var dueDate: LocalDateTime? = null, var done: Boolean = false, ) @Repository interface TodoListRepository : CrudRepository\u0026lt;TodoList, UUID\u0026gt; @Repository interface TodoItemRepository : CrudRepository\u0026lt;TodoItem, UUID\u0026gt; { fun findByTodoListId(id: UUID): List\u0026lt;TodoItem\u0026gt; } Business This layer contains the business logic of the application. Its responsibility is to make sure that business rules are enforced in the application. It usually consists of services that perform a certain task, using repositories and entities from the Infrastructure layer.\nHere\u0026rsquo;s a simple service that can create and remove todo lists (again, in Kotlin):\nclass TodoListService(val repository: TodoListRepository) { fun createTodoList(name: String): TodoList { require(name.isNotBlank()) { \u0026#34;Name cannot be blank\u0026#34; } val todoList = TodoList(UUID.randomUUID(), name) repository.save(todoList) return todoList } fun removeTodoList(todoListToRemove: TodoList) { if (todoListToRemove.items.any { !it.done }) { throw TodoListNotRemovableException() } repository.delete(todoListToRemove) } } This is a common pattern in these services. They check some business rules and if everything is okay, an action is performed. In this example, the business rules are that a todo list must have a name and that a todo list may only be deleted if all its todo items are done.\nHere\u0026rsquo;s an example that creates a new todo item:\nclass TodoItemService { fun create(id: UUID, description: String, dueDate: LocalDateTime?): TodoItem { if (dueDate != null \u0026amp;\u0026amp; dueDate.isBefore(LocalDateTime.now())) throw InvalidDueDateException() val todoList = todoListRepository.findById(id).orElseThrow { TodoListNotFoundException() } val todoItem = TodoItem(id, todoList, description, dueDate) todoList.items.add(todoItem) todoListRepository.save(todoList) return todoItem } } In this example, besides input validation, we also ensure that we don\u0026rsquo;t try to add a todo item to a list that does not exist.\nPresentation In the variants mentioned earlier, the Presentation layer contains presentation and application logic. Alternatively, presentation and application logic can be assigned to separate layers. It contains functionality that is used by end users and uses the Business layer to validate and execute actions that users request. In a backend application that exposes a REST API (for example for a frontend or external systems), this layer contains REST controllers.\nHere\u0026rsquo;s an example of a REST controller, using annotations from Spring Web:\n@RestController @RequestMapping(\u0026#34;/api/v1/todo/list\u0026#34;) class TodoListResource(private val todoListService: TodoListService) { @PostMapping fun create(@RequestParam name: String): ResponseEntity\u0026lt;TodoListRestModel\u0026gt; { val todoList = todoListService.createTodoList(name) return ResponseEntity.status(HttpStatus.CREATED) .body(TodoListRestModel.from(todoList)) } } The Business layer is used to create and store the new todo item. The controller makes sure that a HTTP response is returned, containing the newly created todo item.\nCode review These code examples are pretty simple and straightforward. That\u0026rsquo;s because the problem domain and the associated business rules are simple. You could argue that this code is perfectly fine for such a simple application, and I would agree.\nStill, I\u0026rsquo;d like to review this code with one important question in mind: Does it scale? Features will be added and existing features will be expanded. Systems grow bigger and more complicated, and so does the code. Ideally, we want our code to be designed in such a way that it stays maintainable while the system grows.\nDuplication While not directly obvious in the code above, we can see that we\u0026rsquo;re setting ourselves up for code duplication. For example, let\u0026rsquo;s expand our TodoListService with the ability to rename an existing todo list:\nfun createTodoList(name: String): TodoList { require(name.isNotBlank()) { \u0026#34;Name cannot be blank\u0026#34; } // ... return todoList } fun renameTodoList(id: UUID, name: String) { require(name.isNotBlank()) { \u0026#34;Name cannot be blank\u0026#34; } // ... } Now we have two functions that accept a name for a todo list. Obviously, a String can be blank, which we don\u0026rsquo;t want, so every time we use a String for accepting the name of a todo list, we need to check if that String contains a valid name.\nThis problem arises when parameter types accept more values than the domain we\u0026rsquo;re implementing allows for. If that\u0026rsquo;s the case, we need input validation to make sure our function is not used in an invalid way. This is an anti-pattern, called Primitive Obsession. Be aware that this isn\u0026rsquo;t limited to the usage of primitives. In general, when we use overly permissive parameter types, we likely need input validation.\nPublic mutable state Some of the state of entities in the Infrastructure layer can be changed by everyone. Take TodoItem for example:\n@Entity data class TodoItem( @Id val id: UUID, @ManyToOne @JoinColumn(name = \u0026#34;todolist_id\u0026#34;, nullable = false) val todoList: TodoList, var title: String, var dueDate: LocalDateTime? = null, var done: Boolean = false, ) The fields title, dueDate and done have a public setter. This means it\u0026rsquo;s very easy to write code that violates business rules that are normally enforced by the Business layer. For example, we can easily introduce code that changes a todo item to have an empty title or creates a new todo item with a dueDate in the past.\nThis is an anti-pattern known as Inappropriate Intimacy or Object Orgy.\nLack of encapsulation The issue of public mutable state is a consequence of another design issue: Data and business logic are separated between different classes. Data is modeled as entities, services make sure that the data conforms to the business rules. The entities shown here are basically Data Transfer Objects (DTO\u0026rsquo;s). They tell the Object-Relational Mapper (ORM) what tables exist, which columns these tables consist of, et cetera.\nThese DTO\u0026rsquo;s are used thoughout the entire code base. While the Business layer should be enforcing business rules, it\u0026rsquo;s very easy to violate business rules by changing DTO\u0026rsquo;s in a REST controller, for example.\nWe\u0026rsquo;re using an object-oriented (OO) language, but by designing our code like this we don\u0026rsquo;t benefit from one of the main strengths of OO, which is that data and the associated behaviour are encapsulated in one class. This makes our code more error-prone than it needs to be.\nThere\u0026rsquo;s a bug! Maybe you already spotted it, there\u0026rsquo;s a bug in TodoItemService. Can you find it?\nfun create(id: UUID, description: String, dueDate: LocalDateTime?): TodoItem { if (dueDate != null \u0026amp;\u0026amp; dueDate.isBefore(LocalDateTime.now())) throw InvalidDueDateException() val todoList = todoListRepository.findById(id).orElseThrow { TodoListNotFoundException() } val todoItem = TodoItem(id, todoList, description, dueDate) todoList.items.add(todoItem) todoListRepository.save(todoList) return todoItem } I\u0026rsquo;ve shown this code in several talks I\u0026rsquo;ve given, asking the participants to spot the bug. From my limited \u0026ldquo;testing\u0026rdquo; it seems that the bug is surprisingly hard to find just by looking at the code.\nNow, where\u0026rsquo;s the bug? It\u0026rsquo;s in this line:\nval todoItem = TodoItem(id, todoList, description, dueDate) The id that is passed to the constructor is the id of the containing TodoList! Let\u0026rsquo;s assume the database table for todo items has a proper primary key or a unique constraint. If that\u0026rsquo;s the case, this code will fail as soon as we try to add a second TodoItem to a TodoList, because a duplicate key will be inserted.\nThis is another example of Primitive Obsession. While UUID isn\u0026rsquo;t a primitive type in the strict sense of the word, it is a type that doesn\u0026rsquo;t tell us anything about what kind of ID it actually represents. When we see just a UUID, it can be hard to determine if it\u0026rsquo;s the ID of a todo list, a todo item, or something entirely unrelated to the domain.\nFun fact: This is a bug that I accidentally introduced when I was preparing this code for a talk. I decided to include it in the talk as an example of how Primitive Obsession can easily lead to bugs that can be hard to find.\nSmells To summarize, in these code examples we have identified a couple of code smells:\nPrimitive Obsession \u0026ndash; By using primitives or other overly permissive types, we need to duplicate input validation. Also, it\u0026rsquo;s very easy to introduce bugs when multiple domain concepts are implemented using the same primitive type. Inappropriate Intimacy \u0026ndash; Unrestricted write access to the state of an object can easily lead to violation of business rules. Lack of encapsulation \u0026ndash; Data and behaviour are separated into different classes. Principles One way we can address the issues we found is by designing better types. In this chapter I\u0026rsquo;d like to provide some high-level principles and practices to help in designing better types. In future installments, we\u0026rsquo;ll explore these more in-depth.\nI\u0026rsquo;d like to mention two principles that I think are fundamental to designing with types. The principles are:\nIllegal states should be unrepresentable State changes should be encapsulated Illegal states should be unrepresentable 1 When writing code, the very first feedback we get about our code is from the compiler. This is the shortest possible feedback loop we can have.\nFor example, when we try to assign a string to an integer variable, the compiler will immediately complain.\nval i: Int = \u0026#34;Hello World!\u0026#34; // \u0026lt;-- Compiler error So the idea behind this principle is that in order to make our feedback loop as short as possible, we prefer compile-time validation over runtime validation. We do this by designing types in such a way that it is impossible to write compiling code that introduces an illegal state.\nState changes should be encapsulated Whenever we\u0026rsquo;re using an object, we should be confident that the state of that object is valid. It\u0026rsquo;s hard to be confident about this when the state of an object is freely mutable by everyone. This is why we use encapsulation in OO.\nSo this principle means that we should make each class exclusively responsible for enforcing its own invariants. This implies that each class should have exclusive control over its own state changes.\nPrinciples in practice So how do we put these principles into practice? Let\u0026rsquo;s look at two simple examples.\nValue Object pattern This is such a simple design pattern, but it\u0026rsquo;s oh so powerful! A value object represents one single value. This can be a complex value consisting of multiple fields (i.e. amount and currency for money).\nA value object must conform to the following rules:\nIt is immutable It is self-validating The identity of the object is the value itself Let\u0026rsquo;s look at two examples:\ndata class Name(private val value: String) { init { require(value.isNotBlank()) { \u0026#34;Name cannot be blank\u0026#34; } require(value.lines().size == 1) { \u0026#34;Name must have exactly one line\u0026#34; } } } data class Description(private val value: String) { init { require(value.isNotBlank()) { \u0026#34;Description cannot be blank\u0026#34; } } } Here we have two value objects, Name and Description. Both classes encapsulate an immutable value. Both classes make sure that no invalid value is accepted. This is arguably the simplest possible example of encapsulation, but there are profound consequences:\nFunctions that accept a Name and/or a Description as a parameter don\u0026rsquo;t need input validation for these parameters, because that\u0026rsquo;s what the constructors have already done. We can safely assume that the arguments are valid. We write fewer tests, because if we don\u0026rsquo;t need input validation, we don\u0026rsquo;t need to unit tests input validation. We can\u0026rsquo;t confuse parameters. The following code does not compile, because we cannot pass a Description when a Name is expected. class TodoList(val id: TodoListID, name: Name) fun main() { val list = TodoList(TodoListID.create(), Description(\u0026#34;Description\\nwith multiple lines\u0026#34;)) // \u0026lt;-- Compiler error // ... } So here we see both principles in practice. We make illegal states unrepresentable because we cannot confuse values with different domains. The values in the value objects are encapsulated and guaranteed to be valid, which simplifies our code by eliminating the need for duplicated input validation.\nEncapsulation using sum types Here is a slightly more advanced example using a sum type:\nsealed interface TodoItem { val id: TodoItemID val description: Description data class Todo(override val id: TodoItemID, override val description: Description) : TodoItem { fun updateDescription(newDescription: Description) = this.copy(description = newDescription) fun markAsDone() = Done(id, description) } data class Done(override val id: TodoItemID, override val description: Description) : TodoItem } In this example, we model TodoItem as a value object. The states (todo and done) of a todo item are modeled as implementations of the TodoItem interface. The signatures of these types reveal that the description of a todo item in the todo state can be changed. Todo items that are done cannot be changed at all2.\nThis is another way we can make illegal states unrepresentable using types. In fact, we take it a step further because thanks to the sum type, we also make illegal state changes unrepresentable. The following code does not compile:\nval item: TodoItem = TodoItem.Done(TodoItemID.create(), Description(\u0026#34;Do the laundry\u0026#34;)) val changed: TodoItem = when (item) { is TodoItem.Done -\u0026gt; item.updateDescription(Description(\u0026#34;Do the dishes\u0026#34;)) // \u0026lt;-- Compiler error is TodoItem.Todo -\u0026gt; item } The sum type forces us to check the state of the todo item, before attempting to do anything with it. If we don\u0026rsquo;t, the code simply won\u0026rsquo;t compile. Code that tries to change the description of a done todo item also doesn\u0026rsquo;t compile.\nConclusion A lot of the code I\u0026rsquo;ve seen and written during my career suffers to some degree from the problems mentioned in this article. As said, in simple, small systems there\u0026rsquo;s little harm in having some Primitive Obsession or lack of encapsulation. In such cases adding a lot of types can feel like overengineering. This is fine, as long as you are aware that the antipatterns can become problematic when the system grows.\nBy designing better types, we can make our code safer to use and easier to understand by explicitly revealing intent. In this article we\u0026rsquo;ve seen two simple examples of this.\nNext up, we\u0026rsquo;ll talk some more about safety and revealing intent and we\u0026rsquo;ll look at more examples of using types to our advantage.\nThis phrase was coined by Yaron Minsky. Scott Wlaschin wrote a very nice article about this, as part of his article series on designing with types using F#.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nFor the Kotlin-savvy among you: Yes, I know about copy 😄. We\u0026rsquo;ll address that in a future installment of this series.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://dirkgroot.nl/posts/series/designing-with-types/02-pitfalls-and-practices/","summary":"\u003csummary class=\"dg-summary\"\u003e\n    In this installment of my Designing with Types series, we\u0026rsquo;ll look at how some typical backend code is set up. We\u0026rsquo;ll\nidentify some common pitfalls and identify best practices to avoid these pitfalls.\n\u003c/summary\u003e","title":"Designing with types #02: Pitfalls and Practices"},{"content":" Ever had that sinking feeling when a bug sneaks into production, despite all your testing efforts? Yeah, we\u0026rsquo;ve all been there! While languages like Java, C#, and Kotlin come with powerful type systems, many developers aren\u0026rsquo;t using them to their full potential.\nIn this series, we\u0026rsquo;ll explore how we can use types to catch bugs before they even have a chance to become bugs. We\u0026rsquo;ll look at practical ways to make our designs safer and easier to understand.\nIntroduction This is the first part of a series of articles I\u0026rsquo;m writing about designing with types. In the first two articles we\u0026rsquo;ll set the stage. In subsequent articles we\u0026rsquo;ll explore some practical ways of using types make our code safer and easier to understand.\nFeedback loops Before we dive in, let\u0026rsquo;s consider why this is relevant. While developing software, we are constantly faced with feedback loops. The diagram below shows a simplified version of a typical development process.\nThis diagram shows three types of feedback we could get after we make a change. The build pipeline could fail, a code reviewer could give valuable feedback, or someone could find a bug while manually testing the change.\nFrom this small example, we can easily see that we\u0026rsquo;re more productive when we have short feedback loops. Solving the bugs we inevitably introduce takes longer when more steps are between making the change and receiving feedback. If receiving feedback takes a long time, we\u0026rsquo;ll go do something else in the meantime. This causes context switching which, as we know, is a big productivity killer.\nFinding bugs Development processes like the one shown above typically have multiple ways of finding bugs after they have been introduced. For example:\nCode review Automated tests Manual / exploratory tests Acceptance test Collect end user feedback etc\u0026hellip; We need to do stuff like this. If you\u0026rsquo;re doing all this, good job!\nPreventing bugs There are also multiple ways to prevent bugs from occurring in the first place, for example:\nBacklog refinement Developing in small, safe steps Test-Driven Development 🎇 Design 🎇 Design is what this series is about. We\u0026rsquo;ll explore several ways of using carefully designed types to make illegal states unrepresentable1. Code that introduces an illegal state should not compile.\nDesign Strategy As shown before, we typically spend a lot of time and effort on finding bugs in our software. This is a good thing. Mistakes will always be made and cannot be 100% prevented, not even by the techniques we\u0026rsquo;ll be exploring in this series. However, from what I\u0026rsquo;ve seen \u0026ldquo;in the wild\u0026rdquo;, I do think we tend to miss a lot of opportunities to design our software in ways that prevent bugs from being introduced.\nThe overall strategy we\u0026rsquo;ll be exploring is to prevent bugs by carefully designing a domain model. This domain model implements business rules and should be considered an API that is used by our application logic. The domain model should consist of carefully designed types that make it impossible to build application logic that introduces illegal states in our application. Ideally, mistakes in our application logic are found by the compiler.\nDesign goals In short, the design goals for our domain model are to create an API that:\nis safe to use reveals intent Safety One common cause of bugs is misusing the API of the domain model. Some examples are:\nAssigning invalid values to properties Changing a property of an entity while not allowed Changing the \u0026ldquo;workflow\u0026rdquo; status of an entity while not allowed Calling functions while not allowed Having functions without proper input validation and calling them with invalid parameter values All of this can and will happen, when the API\u0026rsquo;s we design allow for such mistakes to be made.\nSo what do I mean when I say we should design APIs that are safe to use? It means we should aim to design API\u0026rsquo;s that can be used without having to wonder whether they are safe to use in a particular situation. To achieve this, we should prefer compile time validation over runtime validation. When you use an API in an invalid way, the code should not compile.\nRevealing intent Problems like the ones mentioned above also tend to happen when developers misunderstand the intended purpose of APIs. An obvious reason for this is lack of proper naming. For example, completeOrder reveals a lot more intent than setStatus.\nAnother, more subtle, naming problem is that we tend to just not name things. We\u0026rsquo;ll be looking at several examples of this in subsequent articles. As a preparatory exercise, you can look at the code you\u0026rsquo;re working on and see if you can find concepts that are implemented, but not explicitly named.\nAs you will see, safety and revealing intent often go hand in hand. When we improve the safety of your code, we will likely also make the code easier to understand and vice versa.\nNext up In the next article we\u0026rsquo;ll do some more setting the stage by reviewing some commonly seen code. In subsequent articles we\u0026rsquo;ll explore ways of improving the safety and readability of our code.\nThis phrase was coined by Yaron Minsky\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://dirkgroot.nl/posts/series/designing-with-types/01-intro/","summary":"\u003csummary class=\"dg-summary\"\u003e\n    \u003cp\u003eEver had that sinking feeling when a bug sneaks into production, despite all your testing efforts? Yeah, we\u0026rsquo;ve all been\nthere! While languages like Java, C#, and Kotlin come with powerful type systems, many developers aren\u0026rsquo;t using them to\ntheir full potential.\u003c/p\u003e\n\u003cp\u003eIn this series, we\u0026rsquo;ll explore how we can use types to catch bugs before they even have a chance to become bugs. We\u0026rsquo;ll\nlook at practical ways to make our designs safer and easier to understand.\u003c/p\u003e\n\n\u003c/summary\u003e","title":"Designing with types #01: Introduction"},{"content":"My name is Dirk Groot, born in 1977, and I am a software engineer and architect. Programming has been my greatest passion since my early teens.\nWhen I was about 10 years old, my uncle gave me a Commodore 64. With it, he also gave me some C64 magazines. These magazines contained some information about programming, which I found very interesting. Not long afterwards, programming was my biggest hobby.\nSince I started working as a software engineer in 1997, I\u0026rsquo;ve worked on many different kinds of software: Embedded, windows forms, frontend, backend, transaction oriented, batch oriented, etc. I\u0026rsquo;ve also used many programming languages, and I\u0026rsquo;m always eager to learn more. Currently, my favourites are Kotlin, TypeScript and Clojure.\nI\u0026rsquo;m also really passionate about software design, architecture and agile software development. I\u0026rsquo;m particularly fond of test-driven development, YAGNI, and Kent Beck\u0026rsquo;s four rules of simple design.\nPrivate life I\u0026rsquo;m married, and we have 3 children. When I\u0026rsquo;m not programming, I like to run, take hikes in the many forests in and around Arnhem, play piano, watch movies and series, read a book, and occasionally play a video game.\n","permalink":"https://dirkgroot.nl/about/","summary":"\u003cp\u003eMy name is Dirk Groot, born in \u003ca href=\"https://en.wikipedia.org/wiki/1977\"\u003e1977\u003c/a\u003e, and I am a software engineer and architect.\nProgramming has been my greatest passion since my early teens.\u003c/p\u003e\n\u003cp\u003eWhen I was about 10 years old, my uncle gave me a Commodore 64. With it, he also gave me some C64 magazines. These\nmagazines contained some information about programming, which I found very interesting. Not long afterwards, programming\nwas my biggest hobby.\u003c/p\u003e\n\u003cp\u003eSince I started working as a software engineer in 1997, I\u0026rsquo;ve worked on many different kinds of software: Embedded,\nwindows forms, frontend, backend, transaction oriented, batch oriented, etc. I\u0026rsquo;ve also used many programming languages,\nand I\u0026rsquo;m always eager to learn more. Currently, my favourites are Kotlin, TypeScript and Clojure.\u003c/p\u003e","title":"About"}]