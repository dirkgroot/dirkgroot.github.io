<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Design on Dirk Groot</title><link>https://dirkgroot.nl/tags/design/</link><description>Recent content in Design on Dirk Groot</description><image><title>Dirk Groot</title><url>https://dirkgroot.nl/dirkgroot.png</url><link>https://dirkgroot.nl/dirkgroot.png</link></image><generator>Hugo -- 0.147.4</generator><language>en-us</language><lastBuildDate>Wed, 21 May 2025 06:12:50 +0000</lastBuildDate><atom:link href="https://dirkgroot.nl/tags/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Designing with types #01: Introduction</title><link>https://dirkgroot.nl/posts/series/designing-with-types/01-intro/</link><pubDate>Wed, 21 May 2025 06:12:50 +0000</pubDate><guid>https://dirkgroot.nl/posts/series/designing-with-types/01-intro/</guid><description>&lt;summary class="dg-summary">
&lt;p>Ever had that sinking feeling when a bug sneaks into production, despite all your testing efforts? Yeah, we&amp;rsquo;ve all been
there! While languages like Java, C#, and Kotlin come with powerful type systems, many developers aren&amp;rsquo;t using them to
their full potential.&lt;/p>
&lt;p>In this series, we&amp;rsquo;ll explore how we can use types to catch bugs before they even have a chance to become bugs. We&amp;rsquo;ll
look at practical ways to make our designs safer and easier to understand.&lt;/p>
&lt;/summary></description></item></channel></rss>